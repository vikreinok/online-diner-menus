<?xml version="1.0" encoding="UTF-8"?>
<!-- This is the big "beans" tag declaration with all Spring namespaces used. As we use a lot of convenient notations, we use a lot of namespaces... -->
<beans:beans xmlns="http://www.springframework.org/schema/security" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
  
<!--   <security:debug /> -->
<!--   <context:component-scan base-package="ee.ttu.catering.rest.controller.rest" /> -->
<!--   <security:global-method-security jsr250-annotations="enabled" pre-post-annotations="enabled" secured-annotations="enabled" /> -->
  
  <!-- Spring Security special HTTP filter authorization on the login command -->
  <http security="none" pattern="/rest/login" />

  <http entry-point-ref="restAuthenticationEntryPoint">
  	  <intercept-url pattern="/rest/login/**" method="POST" access="ROLE_ANONYMOUS,ROLE_USER" />
  	  <intercept-url pattern="/rest/login/**" method="PUT" access="ROLE_ANONYMOUS,ROLE_USER" />
      <intercept-url pattern="/rest/login/**" method="DELETE" access="ROLE_ANONYMOUS,ROLE_USER" />
	  <intercept-url pattern="/rest/**" method="GET" access="ROLE_ANONYMOUS" />
	  <intercept-url pattern="/rest/**" method="POST" access="ROLE_USER" />
	  <intercept-url pattern="/rest/**" method="PUT"  access="ROLE_USER" />
	  <intercept-url pattern="/rest/**" method="DELETE"  access="ROLE_USER" />
      
      <remember-me />
   </http>


  <!-- Spring Security authentication manager, an alias is created to inject it into the LoginController -->
  <authentication-manager alias="authenticationManager">
    <!-- The application user service is used as the Spring Security authentication provider -->
    <authentication-provider user-service-ref="userServiceImpl" />
  </authentication-manager>

</beans:beans>