<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <groupId>ee.ttu.catering</groupId>
   <artifactId>catering-ui</artifactId>
   <version>0.1-SNAPSHOT</version>
   <packaging>war</packaging>
   <name>TTU Catering</name>
   <description>A TTU catering UI </description>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- Define the version of JBoss' Java EE 6 APIs and Tools we want to import.  -->
      <javaee6.with.tools.version>1.0.0.M1</javaee6.with.tools.version>
   </properties>


	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>

		<!-- optional, good for handle I/O task -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.0.1</version>
		</dependency>

	</dependencies>

   <build>
	<!-- Maven will append the version to the finalName (which is the name given 
		to the generated war, and hence the context root) -->
	<finalName>${project.artifactId}</finalName>
	<plugins>
		<plugin>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>2.3.1</version>
			<configuration>
				<source>1.7</source>
				<target>1.7</target>
			</configuration>
		</plugin>
		<plugin>
			<artifactId>maven-war-plugin</artifactId>
			<version>2.2</version>
			<configuration>
				<outputDirectory>C:/tomcat/webapps/</outputDirectory>
				<warName>catering-ui</warName>
				<failOnMissingWebXml>false</failOnMissingWebXml>
			</configuration>
		</plugin>
	</plugins>
</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
   </profiles>
</project>
